# -*- coding: utf-8 -*-
"""Spam Mail Detection Using Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p_hPlLIHGTsoTI29lY6t1ES4F918t4IM
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer  #converting text data into number data
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""##Data collection and Pre-Processing"""

raw_mail_data = pd.read_csv('/content/mail_data.csv')

# Replace null values with null string

mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)) , '')
# printing first five rows
mail_data.head()

# Checking data size rows and columns
mail_data.shape

"""##Label Encoding"""

# Label spam mail as 0; and ham(not spam) as 1;
mail_data.loc[mail_data['Category'] == 'spam' , 'Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham' , 'Category',] = 1


# spam will be labeled as 0
# ham will be labeled as 1
mail_data.head()

# Separating the data as texts(x) and labels(y)
X = mail_data['Message']
Y = mail_data['Category']
print(X)
print(Y)

"""##Splitting data into training and testing data

"""

X_train , X_test , Y_train , Y_test = train_test_split(X , Y , test_size=0.2 , random_state=3)

# printing the shape of above arrays
print(X.shape , X_train.shape , X_test.shape)

"""##Feature Extraction"""

# transform the text data to feature vectors that can be used for input as Logistic Regession

feature_extraction = TfidfVectorizer(min_df = 1 , stop_words='english')

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

# convert Y_train and Y_test values as integers
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train_features)

print(X_test_features)

"""##Logistic Regression"""

model = LogisticRegression()
# training the LR model with training data

model.fit(X_train_features , Y_train)

"""##Evaluate the model"""

# prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train , prediction_on_training_data)
print("Accuracy of training data : ",accuracy_on_training_data)

# prediction on test data
prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test , prediction_on_test_data)
print("Accuracy of training data : ",accuracy_on_test_data)

"""##Building a predictive system"""

input_mail = ["URGENT! You have won a 1 week FREE membership in our Â£100,000 Prize Jackpot! Txt the word: CLAIM to No: 81010 T&C www.dbuk.net LCCLTD POBOX 4403LDNW1A7RW18"]

# convert text to feature
input_data_features = feature_extraction.transform(input_mail)

# making predictions
prediction = model.predict(input_data_features)
# print(prediction)


if (prediction[0] == 1):
  print("Ham mail")
else:
  print("Spam mail")